import { promises as fs } from 'node:fs';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import type { Options } from 'tsup';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const DIST = 'dist';
const NAME = 'web-router.server';
const PLACEHOLDER_NAME = 'placeholder';
const PLACEHOLDER_CODE = `declare module '@placeholder' {
  /**
   * Placeholder for the meta object.
   * This object is generated by the build tool.
   */
  export const meta: import("./${NAME}.d.ts").Meta;

  /**
   * Placeholder for the manifest object.
   * This object is generated by the build tool.
   */
  export const manifest: import("./${NAME}.d.ts").Manifest;
}`;

export const tsup: Options = {
  entry: {
    [NAME]: 'src/index.ts',
  },
  dts: {
    banner: `/// <reference path="./${PLACEHOLDER_NAME}.d.ts" />`,
  },
  target: 'es2022',
  splitting: true,
  sourcemap: false,
  format: ['esm'],
  outDir: DIST,
  // NOTE: Prevent `placeholder.d.ts` files from being cleaned up.
  clean: false,
  external: [],
  onSuccess: async () => {
    const placeholderPath = path.resolve(
      __dirname,
      DIST,
      `${PLACEHOLDER_NAME}.d.ts`
    );

    try {
      await fs.writeFile(placeholderPath, PLACEHOLDER_CODE, 'utf8');
    } catch (error: any) {
      error.message = `Failed to create file: ${error.message}`;
      throw error;
    }
  },
};
